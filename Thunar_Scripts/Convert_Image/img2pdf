#!/bin/bash
# Converte arquivo imagem para PDF
# Requer Zenity e img2pdf (https://gitlab.mister-muffin.de/josch/img2pdf)
# 2021

# argumentos de entrada
arg="$@"
script=$(basename $0)
today=$(date +%Y-%m-%d)

# Checar argumento
if [[ "$arg" = "" ]]; then
    echo "Empty argument!" >> /tmp/"log-$script-$today"
    zenity --info --text="Select Files!"
    exit 0
fi

# detalhes iniciais
elements="$#"
local=$(dirname $1)
ext_array=("PNG" "png" "JPG" "jpg" "svg" "SVG")

# Confirmando ação
zenity --question \
--title="Script" \
--text="Execute: $script" \
--ok-label="Yes" \
--cancel-label="No"
temp=$?

if [[ $temp -eq 1 ]]; then
      exit 0
fi

# Escrevendo arquivo de log
echo "Started [ $(date '+%Y-%m-%d %H:%M:%S') ]." > /tmp/"log-$script-$today"

# Percorrendo os argumentos de entrada
temp=""
for arg
do
    # argumento
    size=${#arg}
    count=$size

    # Procurando extensão
    while [[ $count -ge 0 ]]; do
        if [[ ${arg:((--count)):1} = '.' ]]; then
            break;
        fi
    done

    # Checar extensão
    ext_temp="${arg:count:size - count}"
    name="PDF"  # padrão para mais de um arquivo
    for ext in ${ext_array[@]}; do
        if [[ $ext_temp == ".$ext" ]]; then
            echo "Image file: $arg OK" >> /tmp/"log-$script-$today"
            temp="$temp $arg"
            # nome do arquivo
            if [[ $elements -eq 1 ]]; then
                last=$count
                while [[ $count -ge 0 ]]; do
                    if [[ ${arg:((--count)):1} = '/' ]]; then
                        break;
                    fi
                done
                name="${arg:count + 1:last - count - 1}"
            fi
            break
        fi
    done
done

# Inserir Data
# output="$local/$name-$(date '+%Y-%m-%d_%H:%M:%S').pdf"
output="$local/$name-$(date '+%Y-%m-%d_%H%M%S').pdf"
if [[ -f $output ]]; then
    echo "Error: '$output' already exists!" >> /tmp/"log-$script-$today"
    zenity --error --text="Error: '$output' already exists!"
else
    # zenity --info --text="convert $temp $output"
    echo "Converting..." >> /tmp/"log-$script-$today"
    # $(convert $temp $output)  # ImageMagick (alternativa antiga)
    $(img2pdf $temp -o $output)
    echo "Output: $output" >> /tmp/"log-$script-$today"
fi

echo "Finished [ $(date '+%Y-%m-%d %H:%M:%S') ]." >> /tmp/"log-$script-$today"
exit 0